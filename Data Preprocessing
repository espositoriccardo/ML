## Importing libraries and dataset
# Import pandas
import pandas as pd

# Load dataset into dataframe
df_sales = pd.read_csv('Sales.csv')
df_sales.head()

# Visualize data statistics
df_sales.describe()

## Analizing and Preprocessing the data
# Check 'date' datatype
type(df_sales.date[0])

# Cast 'date' to datetime
df_sales.date = pd.to_datetime(df_sales.date, format='%Y-%m-%d')
type(df_sales.date[0])

# Eliminate duplicate values
df_sales = df_sales.drop_duplicates(subset=None, keep='first', inplace=False)

# Apply some filtering to obtain a one-year dataset
start_date = "2016-12-01"
end_date = "2017-11-30"

after_start_date = df_sales["date"] >= start_date
before_end_date = df_sales["date"] <= end_date
between_two_dates = after_start_date & before_end_date

df_sales = df_sales.loc[between_two_dates]

# Visualize data statistics
df_sales.describe()

## Product Analysis
# Visualize product distribution
products = 100 * df_sales['product'].value_counts() / df_sales['product'].value_counts().sum()
products.head(10)

# Products are uniformly distributed. 
# Drop 'product' information from the dataset since it won't add any significant contribution to the analysis
df_model_data = df_sales.drop(columns=['product'])
df_model_data

## Country Analysis
# Visualize country distribution
countries = df_model_data.country.value_counts().to_frame().reset_index().rename(columns = {'index': 'country',
                                                                                           'country': 'count'})
countries.head(10)

# Country distribution is highly skewed
# Drop 'country' information from the dataset since it won't add any significant contribution to the analysis
df_model_data.drop(columns = ['country'], inplace=True)
df_model_data

## Aggregating the dataset
# Keep only year & month information
# Drop the daily detail
df_model_data['date'] = df_model_data['date'].dt.strftime('%Y-%m')

# Aggregating 'sales' information and resetting the index
df_model_data = df_model_data.groupby([df_model_data['date'], 'customer']).sum()

df_model_data = df_model_data.reset_index()
df_model_data

# The dataset is now ready for advanced analysis
